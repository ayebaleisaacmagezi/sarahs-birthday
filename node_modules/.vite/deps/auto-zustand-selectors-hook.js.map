{
  "version": 3,
  "sources": ["../../auto-zustand-selectors-hook/src/createSelectorFunctions.ts", "../../auto-zustand-selectors-hook/src/createSelectorHooks.ts"],
  "sourcesContent": ["import { type StoreApi, type UseBoundStore, useStore } from 'zustand';\nimport { useShallow } from 'zustand/react/shallow';\n\nexport interface ZustandFuncSelectors<StateType> {\n  use: {\n    [key in keyof StateType]: () => StateType[key];\n  };\n}\n\nexport function createSelectorFunctions<StateType extends object>(\n  store: UseBoundStore<StoreApi<StateType>> | StoreApi<StateType>\n) {\n  const storeIn = store as any;\n\n  storeIn.use = {};\n\n  Object.keys(storeIn.getState()).forEach((key) => {\n    const selector = (state: StateType) => state[key as keyof StateType];\n    storeIn.use[key] =\n      typeof storeIn === 'function'\n        ? () => storeIn(useShallow(selector))\n        : () => useStore(storeIn, useShallow(selector as any));\n  });\n\n  return store as UseBoundStore<StoreApi<StateType>> &\n    ZustandFuncSelectors<StateType>;\n}\n", "import { type StoreApi, type UseBoundStore, useStore } from 'zustand';\nimport { useShallow } from 'zustand/react/shallow';\n\nexport type ZustandHookSelectors<StateType> = {\n  [Key in keyof StateType as `use${Capitalize<\n    string & Key\n  >}`]: () => StateType[Key];\n};\n\nconst capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\n\nexport function createSelectorHooks<StateType extends object>(\n  store: UseBoundStore<StoreApi<StateType>> | StoreApi<StateType>\n) {\n  const storeIn = store as any;\n\n  Object.keys(storeIn.getState()).forEach((key) => {\n    const selector = (state: StateType) => state[key as keyof StateType];\n    storeIn[`use${capitalize(key)}`] =\n      typeof storeIn === 'function'\n        ? () => storeIn(useShallow(selector))\n        : () => useStore(storeIn, useShallow(selector as any));\n  });\n\n  return storeIn as UseBoundStore<StoreApi<StateType>> &\n    ZustandHookSelectors<StateType>;\n}\n"],
  "mappings": ";;;;;;;;;;;AASM,SAAUA,EACdC,IAAAA;AAEA,MAAMC,KAAUD;AAYhB,SAVAC,GAAQC,MAAM,CAAE,GAEhBC,OAAOC,KAAKH,GAAQI,SAAAA,CAAAA,EAAYC,QAAQ,SAACC,IAAAA;AACvC,QAAMC,IAAW,SAACC,GAAAA;AAAqB,aAAAA,EAAMF,EAAAA;IAAuB;AACpEN,IAAAA,GAAQC,IAAIK,EAAAA,IACS,cAAA,OAAZN,KACH,WAAA;AAAM,aAAAA,GAAQS,WAAWF,CAAAA,CAAAA;IAAU,IACnC,WAAA;AAAM,aAAAG,SAASV,IAASS,WAAWF,CAAAA,CAAAA;IAAiB;EAGrDR,CAAAA,GAAAA;AAET;ACfM,SAAUY,EACdZ,IAAAA;AAEA,MAAMC,KAAUD;AAUhB,SARAG,OAAOC,KAAKH,GAAQI,SAAAA,CAAAA,EAAYC,QAAAA,SAASC,IAAAA;AACvC,QARgBM,GAQVL,IAAW,SAACC,GAAAA;AAAqB,aAAAA,EAAMF,EAAAA;IAAuB;AACpEN,IAAAA,GAAQ,MAAMa,QATED,IASSN,IATKM,EAAEE,OAAO,CAAA,EAAGC,YAAAA,IAAgBH,EAAEI,MAAM,CAAA,EAAA,CAAA,IAU7C,cAAA,OAAZhB,KACH,WAAA;AAAM,aAAAA,GAAQS,WAAWF,CAAAA,CAAAA;IAAU,IACnC,WAAA;AAAM,aAAAG,SAASV,IAASS,WAAWF,CAAAA,CAAAA;IAAiB;EAC5D,CAAA,GAEOP;AAET;",
  "names": ["createSelectorFunctions", "store", "storeIn", "use", "Object", "keys", "getState", "forEach", "key", "selector", "state", "useShallow", "useStore", "createSelectorHooks", "s", "concat", "charAt", "toUpperCase", "slice"]
}
