{"version":3,"file":"index.es.js","sources":["../src/createSelectorFunctions.ts","../src/createSelectorHooks.ts"],"sourcesContent":["import { type StoreApi, type UseBoundStore, useStore } from 'zustand';\nimport { useShallow } from 'zustand/react/shallow';\n\nexport interface ZustandFuncSelectors<StateType> {\n  use: {\n    [key in keyof StateType]: () => StateType[key];\n  };\n}\n\nexport function createSelectorFunctions<StateType extends object>(\n  store: UseBoundStore<StoreApi<StateType>> | StoreApi<StateType>\n) {\n  const storeIn = store as any;\n\n  storeIn.use = {};\n\n  Object.keys(storeIn.getState()).forEach((key) => {\n    const selector = (state: StateType) => state[key as keyof StateType];\n    storeIn.use[key] =\n      typeof storeIn === 'function'\n        ? () => storeIn(useShallow(selector))\n        : () => useStore(storeIn, useShallow(selector as any));\n  });\n\n  return store as UseBoundStore<StoreApi<StateType>> &\n    ZustandFuncSelectors<StateType>;\n}\n","import { type StoreApi, type UseBoundStore, useStore } from 'zustand';\nimport { useShallow } from 'zustand/react/shallow';\n\nexport type ZustandHookSelectors<StateType> = {\n  [Key in keyof StateType as `use${Capitalize<\n    string & Key\n  >}`]: () => StateType[Key];\n};\n\nconst capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\n\nexport function createSelectorHooks<StateType extends object>(\n  store: UseBoundStore<StoreApi<StateType>> | StoreApi<StateType>\n) {\n  const storeIn = store as any;\n\n  Object.keys(storeIn.getState()).forEach((key) => {\n    const selector = (state: StateType) => state[key as keyof StateType];\n    storeIn[`use${capitalize(key)}`] =\n      typeof storeIn === 'function'\n        ? () => storeIn(useShallow(selector))\n        : () => useStore(storeIn, useShallow(selector as any));\n  });\n\n  return storeIn as UseBoundStore<StoreApi<StateType>> &\n    ZustandHookSelectors<StateType>;\n}\n"],"names":["createSelectorFunctions","store","storeIn","use","Object","keys","getState","forEach","key","selector","state","useShallow","useStore","createSelectorHooks","s","concat","charAt","toUpperCase","slice"],"mappings":"sFASM,SAAUA,EACdC,GAEA,IAAMC,EAAUD,EAYhB,OAVAC,EAAQC,IAAM,CAAE,EAEhBC,OAAOC,KAAKH,EAAQI,YAAYC,SAAQ,SAACC,GACvC,IAAMC,EAAW,SAACC,GAAqB,OAAAA,EAAMF,EAAuB,EACpEN,EAAQC,IAAIK,GACS,mBAAZN,EACH,WAAM,OAAAA,EAAQS,EAAWF,GAAU,EACnC,WAAM,OAAAG,EAASV,EAASS,EAAWF,GAAiB,CAGrDR,IAAAA,CAET,CCfM,SAAUY,EACdZ,GAEA,IAAMC,EAAUD,EAUhB,OARAG,OAAOC,KAAKH,EAAQI,YAAYC,SAAAA,SAASC,GACvC,IARgBM,EAQVL,EAAW,SAACC,GAAqB,OAAAA,EAAMF,EAAuB,EACpEN,EAAQ,MAAMa,QATED,EASSN,EATKM,EAAEE,OAAO,GAAGC,cAAgBH,EAAEI,MAAM,MAU7C,mBAAZhB,EACH,WAAM,OAAAA,EAAQS,EAAWF,GAAU,EACnC,WAAM,OAAAG,EAASV,EAASS,EAAWF,GAAiB,CAC5D,IAEOP,CAET"}